#!/bin/bash
###################################################
#                  fftestgen                      #
#                                                 #
###################################################
# This script can transcode video files to the format
# that can be played by HTC Desire( of course other
# Android devices too). This will generate video
# files in different resolution, bitrate, framerate,
# etc. You can use this to test your media player in
# android
#
###################################################
# This script will transcode the input video into 3
# format of resolution, which is:
# 800x480, 320x240, 160x120
# and for each resolution, use 3 different framerate:
# 24, 15, 10. So there will be 9 output files finally
# First it will keep the aspect ratio of the original
# file, and then crop the video to fit these three
# resolutions, most time, it just add some black
# pixels on top&bottom to the output video.
###################################################
# Created by laputa at 8/5/2011
# <justlaputa@gmail.com>

VERSION=0.1

PROGRAMNAME=fftestgen
FFMPEG=$(which ffmpeg)

if [[ "x$FFMPEG" == "x" ]]
then
    echo "Can not find ffmpeg in your system, try to install it first"
    exit 1
fi

usage()
{
    cat <<EOF
Generate test video files for Android Devices
    Usage: $PROGRAMNAME [-l level] [-r framerate_level] [-pass2] [-v] -i inputfile [ffmpeg options]
    OPTIONS:
    -l level
        transcode level, 1 for only 800x480, 2 will add 320x240, and 3 will add 160x120
    -r framerate_level
        specifies the framerate level, 1 for only 24fps, 2 add 15fps, and 3 add 10fps
    -pass2
        if specified, will use 2 pass ffmpeg encode
    -i inputfile
        input file
    -v
        verbose output
    -h
        print this help information
    [ffmpeg options]
        other options will be added to ffmpeg
EOF
}

LEVEL=${LEVEL:-1}
FRAMERATE_LEVEL=${FRAMERATE_LEVEL:-1}

while [[ $# -ne 0 ]]
do
    case "$1" in
	-l)
	    LEVEL=$2
	    (( LEVEL < 1 || LEVEL > 3 )) && echo "level must be 1-3" && exit 1
	    shift 2
	    ;;
	-r)
	    FRAMERATE_LEVEL=$2
	    (( FRAMERATE_LEVEL < 1 || FRAMERATE_LEVEL > 3 )) && echo "frame level must be 1-3" && exit 1
	    shift 2
	    ;;
	-pass2)
	    PASS2=1
	    shift
	    ;;
	-i)
	    if [[ $INPUTFILE ]]
	    then
		echo "only one input file is supported"
		exit 1
	    fi
	    INPUTFILE="$2"
	    shift 2
	    ;;
	-v)
	    VERBOSE=1
	    shift
	    ;;
	-h)
	    usage
	    exit 0
	    ;;
	*)
	    FFOPTIONS="$FFOPTIONS $1"
	    shift
	    ;;
    esac
done

get_input()
{
    if [[ ! -f "$1" ]]
    then
	echo "file $1 dose not exists"
	exit 1
    fi
    INPUT_WIDTH=$(ffmpeg -i "$1" 2>&1 | grep "Stream.*Video:" | sed 's/^.* \([0-9]*\)x\([0-9]*\).*$/\1/')
    INPUT_HEIGHT=$(ffmpeg -i "$1" 2>&1 | grep "Stream.*Video:" | sed 's/^.* \([0-9]*\)x\([0-9]*\).*$/\2/')
}

BITRATES=( 400k 200k 100k )
FRAMERATES=( 24 15 10 )
AUDIO_BITRATES=( 128k 64k 32k )
VIDEO_OUT_WIDTH=( 800 320 160 )
VIDEO_OUT_HEIGHT=( 480 240 120 )

VIDEO_PASS1="-vpre fast_firstpass -vpre baseline"
VIDEO_PASS2="-vpre slow -vpre baseline"
AUDIO_CODEC="-acodec libmp3lame"
VIDEO_CODEC="-vcodec libx264"

OUTPUT_VIDEO=h264
OUTPUT_AUDIO=mp3
OUTPUT_FORMAT=mp4

if [ ! $VERBOSE ]
then
	exec 6>&1
	exec 7>&2
	exec >/dev/null
	exec 2>/dev/null
fi

for (( i=0 ; i<LEVEL ; i++ ))
do
    get_input "$INPUTFILE"
    if [[ x"$INPUT_WIDTH" == x || x"$INPUT_HEIGHT" == x ]]
    then
	echo "Can not get video width/height form input file"
	exit 1;
    fi

    # we calculate the output widthxheight here, with both width and height
    # in 4 pixel alignment
    width=${VIDEO_OUT_WIDTH[$i]}
    height=${VIDEO_OUT_HEIGHT[$i]}
    bitrate=${BITRATES[$i]}
    abitrate=${AUDIO_BITRATES[$i]}

    if (( INPUT_WIDTH < width && INPUT_HEIGHT < height ))
    then
	echo "origin file is ${INPUT_WIDTH}x${INPUT_HEIGHT}, skip ${width}x${height}"
	continue
    fi

    if (( INPUT_WIDTH * height < INPUT_HEIGHT * width ))
    then
	OUTPUT_HEIGHT=$height
	let "OUTPUT_WIDTH = INPUT_WIDTH * OUTPUT_HEIGHT / INPUT_HEIGHT"
	let "OUTPUT_WIDTH = OUTPUT_WIDTH - OUTPUT_WIDTH % 4"
	let "PADLEFT = ( width - OUTPUT_WIDTH ) / 2"

	VIDEO_PARAM="-s ${OUTPUT_WIDTH}x${OUTPUT_HEIGHT} -vf pad=$width:$height:$PADLEFT:0"
    else
	OUTPUT_WIDTH=$width
	let "OUTPUT_HEIGHT = INPUT_HEIGHT * OUTPUT_WIDTH / INPUT_WIDTH"
	let "OUTPUT_HEIGHT = OUTPUT_HEIGHT - OUTPUT_HEIGHT % 4"
	let "PADTOP = ( height - OUTPUT_HEIGHT ) / 2"

	VIDEO_PARAM="-s ${OUTPUT_WIDTH}x${OUTPUT_HEIGHT} -vf pad=$width:$height:0:$PADTOP"
    fi

    for (( j = 0; j < FRAMERATE_LEVEL ; j++ ))
    do
	framerate=${FRAMERATES[$j]}
	OUTPUTFILE=${INPUTFILE##*/}
	OUTPUTFILE=${OUTPUTFILE%.*}
	OUTPUTFILE=${OUTPUTFILE}.${OUTPUT_WIDTH}x${OUTPUT_HEIGHT}.$bitrate.${framerate}fps.${OUTPUT_VIDEO}.${OUTPUT_AUDIO}.${OUTPUT_FORMAT}

	echo -e "transcode " '\E[0;32m' "$INPUTFILE"
	tput sgr0
	echo -e "to        " '\E[1;31m' "$OUTPUTFILE"
	tput sgr0
	
	if [[ $PASS2 ]]
	then
	    echo -e '\E[0;32m' "pass1"
	    tput sgr0

	    $FFMPEG -y -i "$INPUTFILE" $VIDEO_PARAM $VIDEO_CODEC $VIDEO_PASS1 \
		-b $bitrate -r $framerate -an -pass 1 -f rawvideo $FFOPTIONS /dev/null
#FIXME always encode to stereo audio
	    echo -e '\E[1;31m' "pass2"
	    tput sgr0

	    $FFMPEG -y -i "$INPUTFILE" $VIDEO_PARAM $VIDEO_CODEC $VIDEO_PASS2 \
		-b $bitrate -r $framerate $AUDIO_CODEC -ab $abitrate -ac 2 -pass 2 $FFOPTIONS "$OUTPUTFILE"
	else
	    $FFMPEG -y -i "$INPUTFILE" $VIDEO_PARAM $VIDEO_CODEC $VIDEO_PASS2 \
		-b $bitrate -r $framerate $AUDIO_CODEC -ab $abitrate -ac 2 $FFOPTIONS "$OUTPUTFILE"
	fi
    done
done

if [ ! $VERBOSE ]
then
	exec 1>&6 6>&-
	exec 2>&7 7>&-
fi

exit 0